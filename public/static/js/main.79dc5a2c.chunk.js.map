{"version":3,"sources":["components/Card/Card.js","components/List/List.js","components/Search/Search.js","utils/constants.js","pages/DetailsPage/DetailsPage.js","pages/SearchPage/SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["Card","React","memo","props","movie","history","useHistory","className","style","width","margin","background","height","overflow","src","Poster","alt","color","Title","Year","Type","onClick","push","imdbID","List","elements","component","map","e","element","createElement","key","Search","value","Jumbotron","fluid","Container","type","onChange","target","onSubmit","baseUrl","axiosHeaders","headers","DetailsPage","useState","Details","setDetails","useParams","url","useEffect","axios","get","then","res","data","catch","err","console","error","Plot","ListGroup","Item","imdbRating","Rated","Runtime","Genre","Director","Writer","Actors","SearchPage","searchTerm","setSearchTerm","searchResult","setSearchResult","uri","Array","onSubmitSuccess","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.79dc5a2c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\n/**\r\n * useState(), useHistory() => Both are react hooks.\r\n * React hooks help to change state.\r\n * State change via hooks also informs React that\r\n * re-rendering is required.\r\n * React.memo is a special function. It prevents re-rendering\r\n * unless this component's input has changed.\r\n * Usually all child components re-rendered.\r\n * With React.memo() only if this component input has updated\r\n * then re-rendering will occur.\r\n */\r\nconst Card = React.memo(props => {\r\n  /**\r\n   * movie = {\r\n   *  Poster: String,\r\n   *  Title: String,\r\n   *  Year: String,\r\n   *  Type: String,\r\n   *  imdbID: String\r\n   * }\r\n   */\r\n  const movie = props.movie;\r\n  const history = useHistory();\r\n\r\n  const viewButtonClick = () => {\r\n    history.push(`/details/${movie.imdbID}`);\r\n  }\r\n  \r\n  return (\r\n    <div className=\"col-md-4\">\r\n      <div className=\"card\" style={{ width: '18rem', margin: 'auto', background:'#083256' }}>\r\n        <div className=\"bd-placeholder-img card-img-top\" style={{ width: '18rem', height: '18rem', overflow: 'hidden' }}>\r\n          <img src={movie.Poster} style={{ width: '18rem' }} alt=\"Poster\" />\r\n        \r\n        </div>\r\n        <div className=\"card-body\" style={{color: '#c5c6c7'}}>\r\n          <h5 className=\"card-title\" style={{color: '#00caf4'}}>{movie.Title}</h5>\r\n          <p className=\"card-text\"> Year : {movie.Year} , Type: {movie.Type} </p>\r\n          <button className=\"btn btn-warning \" style={{color: '#c5c6c7', background:'#09233c'}} onClick={viewButtonClick}>View</button>\r\n        </div>\r\n      </div>\r\n      <br />\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nexport default function List(props) {\r\n  const elements = props.elements || []; // Array of movies\r\n  const component = props.component; // Card component\r\n\r\n  const createReactElement = (element) => {\r\n    /**\r\n     * This is a specific use case where you have to use the compiled version directly\r\n     * Second argument is input for card component.\r\n     * A list in react has to have a unique input property of key.\r\n     */\r\n    return React.createElement(component, { movie: element, key: element.imdbID  })\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {elements.map(e => createReactElement(e))}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './Search.css';\r\nimport { Jumbotron } from 'react-bootstrap';\r\nimport {Container } from 'react-bootstrap';\r\n\r\n\r\n\r\nexport default function Search(props) {\r\n  const value = props.value;\r\n  const handleChange = (e) => props.onChange(e.target.value);\r\n  const handleSubmit = () => props.onSubmit(value);\r\n\r\n  return (\r\n    <Jumbotron fluid style={{color:'#00caf4', background: '#083256'}}>\r\n       <h1 className=\"title\">Search Films!</h1>\r\n    <Container className=\"background\">\r\n    \r\n   \r\n      <input className=\"search clear-margin-top\" type=\"text\" value={value} onChange={handleChange} />\r\n      <button  className=\"btn btn-warning clear-margin-top \" style={{color: '#c5c6c7', background:'#09233c'}}  onClick={handleSubmit}>Search</button>\r\n      \r\n    </Container>\r\n    </Jumbotron>\r\n  )\r\n}","\r\nconst baseUrl = 'http://localhost:3000/';\r\nconst axiosHeaders = {\r\n\theaders: {\r\n\t  'Access-Control-Allow-Origin': '*',\r\n\t}\r\n};\r\nexport { baseUrl, axiosHeaders }","\r\nimport React, { useState , useEffect} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { baseUrl, axiosHeaders } from '../../utils/constants';\r\nimport {Jumbotron} from 'react-bootstrap'\r\nimport {Container} from 'react-bootstrap'\r\nimport {ListGroup} from 'react-bootstrap'\r\nimport './detail.css';\r\n\r\nexport default function DetailsPage() {\r\n   \r\n    const [Details, setDetails] = useState([]);\r\n    const params = useParams();\r\n    \r\n    const imdbID = params.imdbID;\r\n  \r\n    const url = `${baseUrl}omdb/imdb/${imdbID}`;\r\n\r\n    useEffect(() => {\r\n      axios.get(url, axiosHeaders)\r\n      .then(res => setDetails(res.data))\r\n      .catch(err => console.error(err));\r\n      }, []);\r\n     \r\n        \r\n     \r\n  \r\n\r\n    return (\r\n      <>\r\n <Jumbotron fluid style={{color:'#00caf4', background: '#083256'}}>\r\n  <Container>\r\n    <h1>{Details.Title}</h1>\r\n    <p style={{color:'#c5c6c7'}}>\r\n    {Details.Plot}\r\n    </p>\r\n  </Container>\r\n</Jumbotron>\r\n<div className=\"row\">\r\n<div className= \"col-sm-12 col-md-4 offset-md-2 image ml-auto\">\r\n<div className=\"bd-placeholder-img card-img-top\" >\r\n          <img src={Details.Poster} alt=\"Poster\" />\r\n        \r\n        </div>\r\n</div>\r\n<div className =\"col-sm-12 col-md-4 mr-auto\">\r\n  <ListGroup.Item style={{color:'#00caf4', background: '#083256'}}>IMDB:<div style={{color:'yellow'}}>{Details.imdbRating}</div></ListGroup.Item>\r\n  <ListGroup.Item style={{color:'#00caf4', background: '#083256'}}>Year:<div style={{color:'yellow'}}>{Details.Year}</div> </ListGroup.Item>\r\n  <ListGroup.Item style={{color:'#00caf4', background: '#083256'}}>Rated:<div style={{color:'yellow'}}> {Details.Rated}</div></ListGroup.Item>\r\n  <ListGroup.Item style={{color:'#00caf4', background: '#083256'}}>Runtime:<div style={{color:'yellow'}}>{Details.Runtime}</div> </ListGroup.Item>\r\n  <ListGroup.Item style={{color:'#00caf4', background: '#083256'}}>Genre:<div style={{color:'yellow'}}>{Details.Genre}</div> </ListGroup.Item>\r\n  <ListGroup.Item style={{color:'#00caf4', background: '#083256'}}>Director:<div style={{color:'yellow'}}> {Details.Director}</div></ListGroup.Item>\r\n  <ListGroup.Item style={{color:'#00caf4', background: '#083256'}}>Writer:<div style={{color:'yellow'}}>{Details.Writer}</div> </ListGroup.Item>\r\n  <ListGroup.Item style={{color:'#00caf4', background: '#083256'}}>Actors:<div style={{color:'yellow'}}>{Details.Actors}</div> </ListGroup.Item>\r\n</div>\r\n</div>\r\n    </>\r\n    \r\n    );\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Card from '../../components/Card/Card';\r\nimport List from '../../components/List/List';\r\nimport Search from '../../components/Search/Search';\r\n\r\nimport { baseUrl, axiosHeaders } from '../../utils/constants';\r\nimport DetailsPage from '../DetailsPage/DetailsPage';\r\n\r\nexport default function SearchPage() {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searchResult, setSearchResult] = useState([]);\r\n\r\n  const onSubmitSuccess = (res) => {\r\n    // Data validation before setting searchResult\r\n    if (res && res.data && res.data.Search instanceof Array) {\r\n      setSearchResult(res.data.Search);\r\n    }\r\n  }\r\n\r\n  const onSubmit = (searchTerm) => {\r\n    const uri = `${baseUrl}omdb/search?title=${searchTerm}`;\r\n    axios.get(uri, axiosHeaders)\r\n      .then(res => onSubmitSuccess(res))\r\n      .catch(err => console.error(err));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Search value={searchTerm} onChange={setSearchTerm} onSubmit={onSubmit} />\r\n      <br />\r\n      <List elements={searchResult} component={Card} />\r\n\r\n      \r\n    </>\r\n  )\r\n}","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport SearchPage from './pages/SearchPage/SearchPage';\r\nimport DetailsPage from './pages/DetailsPage/DetailsPage';\r\n\r\n\r\n/**\r\n * The Router maps a url to a component\r\n */\r\nfunction App() {\r\n  return (\r\n   \r\n    <div className=\"container-fluid remove-padding\">\r\n      <Router>\r\n        <Switch>\r\n         \r\n          <Route path=\"/details/:imdbID\" component={DetailsPage} />\r\n          <Route path=\"/\" component={SearchPage} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}